diff --git a/src/ThemeSwitch.astro b/src/ThemeSwitch.astro
index 19fbffb37c5e3bdff27e493574c5d1af56b52ea0..763d275880f08f5ce78f3d7c08cc41a5b4903802 100644
--- a/src/ThemeSwitch.astro
+++ b/src/ThemeSwitch.astro
@@ -6,9 +6,18 @@ interface Props {
 }
 
 const { strategy, defaultTheme, as: Element = "span" } = Astro.props;
+
+function uuidv4() {
+  return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, c =>
+    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
+  );
+}
+
+const dataIdPrefix = "astro-color-scheme-switch";
+const dataId = `${dataIdPrefix}__${uuidv4()}`;
 ---
 
-<Element id="astro-color-scheme-switch">
+<Element data-id={dataId} data-strategy={strategy}>
   <slot />
 </Element>
 
@@ -18,8 +27,8 @@ const { strategy, defaultTheme, as: Element = "span" } = Astro.props;
   }
 </style>
 
-<script define:vars={{ strategy, defaultTheme }}>
-  const themeSwitch = document.getElementById("astro-color-scheme-switch");
+<script define:vars={{ strategy, defaultTheme, dataId, dataIdPrefix }}>
+  const themeSwitch = document.querySelector(`[data-id="${dataId}"]`);
   const theme = localStorage.getItem("theme");
   const themeMatcher = window.matchMedia("(prefers-color-scheme: dark)");
   let systemTheme = themeMatcher.matches ? "dark" : "light";
@@ -69,6 +78,33 @@ const { strategy, defaultTheme, as: Element = "span" } = Astro.props;
     element.addEventListener(eventType, themeUpdater);
   }
 
+  function updateAllThemeSwitchers(value) {
+    const themeSwitchers = document.querySelectorAll(`[data-id^="${dataIdPrefix}"]`);
+    if (!(themeSwitchers.length > 1)) return;
+
+    themeSwitchers.forEach((themeSwitcher) => {
+      const strategy = themeSwitcher.getAttribute("data-strategy");
+      switch(strategy) {
+        case "button":
+          const button = themeSwitcher.querySelector("button");
+          (button.value !== value) && (button.value = value);
+          break;
+        case "select":
+          const select = themeSwitcher.querySelector("select");
+          (select.value !== value) && (select.value = value);
+          break;
+        case "checkbox":
+          const checkbox = themeSwitcher.querySelector("input");
+          (checkbox.value !== value) && (checkbox.value = value, checkbox.checked = !checkbox.checked);
+          break;
+        case "radio":
+          const radio = themeSwitcher.querySelectorAll("radio").find((radio) => radio.value === value)
+          !radio.chenked && (radio.checked = true);
+          break;
+      }
+    });
+  }
+
   switch (strategy) {
     case "button":
       setupThemeSwitch("button", "click", (event) => {
@@ -76,12 +112,14 @@ const { strategy, defaultTheme, as: Element = "span" } = Astro.props;
         const settheme = button.value === "dark" ? "light" : "dark";
         button.value = settheme;
         updateTheme(settheme);
+        updateAllThemeSwitchers(settheme)
       });
       break;
     case "select":
       setupThemeSwitch("select", "change", (event) => {
         const select = event.target;
         updateTheme(select.value);
+        updateAllThemeSwitchers(select.value)
       });
       break;
     case "checkbox":
@@ -90,14 +128,17 @@ const { strategy, defaultTheme, as: Element = "span" } = Astro.props;
         const settheme = checkbox.value === "dark" ? "light" : "dark";
         checkbox.value = settheme;
         updateTheme(settheme);
+        updateAllThemeSwitchers(settheme)
       });
       break;
     case "radio":
       setupThemeSwitch("form", "click", (event) => {
         updateTheme(event.target.value);
+        updateAllThemeSwitchers(event.target.value)
       });
       break;
     default:
       updateTheme(theme || defaultTheme || systemTheme);
+      updateAllThemeSwitchers(theme || defaultTheme || systemTheme)
   }
 </script>