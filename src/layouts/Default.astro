---
import BaseLayout from '~/layouts/Base.astro'
import BaseHead from '~/components/BaseHead.astro'
import SiteSide from '~/components/SiteSide.astro'
import ControlSide from '~/components/ControlSide.astro'
import Footer from '~/components/Footer.astro'
import SiteSearch from '~/components/SiteSearch.astro'

---

<BaseLayout>
  <slot name="head" slot="head">
    <BaseHead />
  </slot>

  <div class:list={[
    'fixed left-0 h-full bg-secondary',
    'sm:(w-80px)',
    'lg:(w-20%)',
    'xl:(w-[calc((100vw-var(--site-theme-breakpoints-xl,1440px))/2+var(--site-theme-breakpoints-xl,1440px)*0.2)])',
  ]}></div>

  <div class:list={[
    'relative w-full min-h-100dvh layout_default',
    'grid grid-cols-1',
    'sm:(grid-cols-[80px_calc(100%-80px)])',
    'lg:(grid-cols-[20%_80%])',
    'xl:(px-[calc((100%-var(--site-theme-breakpoints-xl,1440px))/2)])',
  ]}>
    <SiteSide />
    <main class:list={[
      'p-6',
      'grid grid-cols-1 grid-rows-[1fr_auto]',
    ]}>
      <slot />

      <Footer />
    </main>
  </div>

  <SiteSearch />
  <ControlSide class="flex-none" />
</BaseLayout>

<script>
  import { pausePageScroll, restorePageScroll } from '~/utils/scroll.js'

  const siteMasksObserver = new MutationObserver((mutationList) => {
    mutationList.forEach((mutation) => {
      const target = mutation.target as HTMLElement

      const isShow = ['!block', '!translate-none']
        .some((className) => target.classList.contains(className))

      isShow
        ? pausePageScroll()
        : restorePageScroll()

      const isSiteSearch = target.classList.contains('component_site-search')
      if (isSiteSearch && isShow) {
        (target.querySelector('.pagefind-ui__search-input') as HTMLInputElement).focus()
      }
    })
  })

  const siteMasks = document.querySelectorAll('[site-mask]')
  siteMasks.forEach((mask) => {
    siteMasksObserver.observe(mask, {
      attributes: true,
      attributeFilter: ['class'],
    })

    const closeMask = () => mask.classList.remove('!block', '!translate-none')

    mask.addEventListener('click', (e: HTMLElementEvent<HTMLElement>) => {
      const isCurrentTarget = e.target === e.currentTarget
      if (isCurrentTarget) {
        const isCloseableBySelf = window.getComputedStyle(e.currentTarget).getPropertyValue('--site-mask-clickable-by-self') === '1'
        isCloseableBySelf && closeMask()
      }
    })

    mask.querySelector('.site-mask__close')?.addEventListener('click', () => {
      closeMask()
    })
  })
</script>
